// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Task struct {
	ID                string    `json:"ID"`
	SubscriptionToken string    `json:"SubscriptionToken"`
	ControlToken      string    `json:"ControlToken"`
	StartTime         time.Time `json:"StartTime"`
	Status            Status    `json:"Status"`
}

type TaskStatus struct {
	TaskID      string                 `json:"TaskID"`
	Status      Status                 `json:"Status"`
	Error       *string                `json:"Error"`
	Information map[string]interface{} `json:"Information"`
}

type Command string

const (
	CommandStop     Command = "STOP"
	CommandPause    Command = "PAUSE"
	CommandContinue Command = "CONTINUE"
)

var AllCommand = []Command{
	CommandStop,
	CommandPause,
	CommandContinue,
}

func (e Command) IsValid() bool {
	switch e {
	case CommandStop, CommandPause, CommandContinue:
		return true
	}
	return false
}

func (e Command) String() string {
	return string(e)
}

func (e *Command) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Command(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid COMMAND", str)
	}
	return nil
}

func (e Command) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusPadding               Status = "PADDING"
	StatusStarting              Status = "STARTING"
	StatusMonitoring            Status = "MONITORING"
	StatusProductFound          Status = "PRODUCT_FOUND"
	StatusAddingToCart          Status = "ADDING_TO_CART"
	StatusSolvingCaptcha        Status = "SOLVING_CAPTCHA"
	StatusCheckingOut           Status = "CHECKING_OUT"
	StatusCheckedOut            Status = "CHECKED_OUT"
	StatusError                 Status = "ERROR"
	StatusActionNeeded          Status = "ACTION_NEEDED"
	StatusGeneratingCookies     Status = "GENERATING_COOKIES"
	StatusTaskNotFound          Status = "TASK_NOT_FOUND"
	StatusWaitingForCheckout    Status = "WAITING_FOR_CHECKOUT"
	StatusCheckoutError         Status = "CHECKOUT_ERROR"
	StatusCheckoutFailed        Status = "CHECKOUT_FAILED"
	StatusCheckoutDuplicate     Status = "CHECKOUT_DUPLICATE"
	StatusCheckoutOos           Status = "CHECKOUT_OOS"
	StatusCheckoutDecline       Status = "CHECKOUT_DECLINE"
	StatusCheckoutWaitingFor3ds Status = "CHECKOUT_WAITING_FOR_3DS"
	StatusCheckout3dsError      Status = "CHECKOUT_3DS_ERROR"
	StatusLoggingIn             Status = "LOGGING_IN"
	StatusLoggedIn              Status = "LOGGED_IN"
	StatusProcessing            Status = "PROCESSING"
	StatusSubmittingShipping    Status = "SUBMITTING_SHIPPING"
	StatusSubmittingPayment     Status = "SUBMITTING_PAYMENT"
	StatusSubmittingCheckout    Status = "SUBMITTING_CHECKOUT"
	StatusAddedToCart           Status = "ADDED_TO_CART"
	StatusStopped               Status = "STOPPED"
	StatusPausing               Status = "PAUSING"
	StatusPaused                Status = "PAUSED"
	StatusContinuing            Status = "CONTINUING"
	StatusContinued             Status = "CONTINUED"
	StatusRestarting            Status = "RESTARTING"
)

var AllStatus = []Status{
	StatusPadding,
	StatusStarting,
	StatusMonitoring,
	StatusProductFound,
	StatusAddingToCart,
	StatusSolvingCaptcha,
	StatusCheckingOut,
	StatusCheckedOut,
	StatusError,
	StatusActionNeeded,
	StatusGeneratingCookies,
	StatusTaskNotFound,
	StatusWaitingForCheckout,
	StatusCheckoutError,
	StatusCheckoutFailed,
	StatusCheckoutDuplicate,
	StatusCheckoutOos,
	StatusCheckoutDecline,
	StatusCheckoutWaitingFor3ds,
	StatusCheckout3dsError,
	StatusLoggingIn,
	StatusLoggedIn,
	StatusProcessing,
	StatusSubmittingShipping,
	StatusSubmittingPayment,
	StatusSubmittingCheckout,
	StatusAddedToCart,
	StatusStopped,
	StatusPausing,
	StatusPaused,
	StatusContinuing,
	StatusContinued,
	StatusRestarting,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusPadding, StatusStarting, StatusMonitoring, StatusProductFound, StatusAddingToCart, StatusSolvingCaptcha, StatusCheckingOut, StatusCheckedOut, StatusError, StatusActionNeeded, StatusGeneratingCookies, StatusTaskNotFound, StatusWaitingForCheckout, StatusCheckoutError, StatusCheckoutFailed, StatusCheckoutDuplicate, StatusCheckoutOos, StatusCheckoutDecline, StatusCheckoutWaitingFor3ds, StatusCheckout3dsError, StatusLoggingIn, StatusLoggedIn, StatusProcessing, StatusSubmittingShipping, StatusSubmittingPayment, StatusSubmittingCheckout, StatusAddedToCart, StatusStopped, StatusPausing, StatusPaused, StatusContinuing, StatusContinued, StatusRestarting:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid STATUS", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
